// Generated by CoffeeScript 1.10.0
var Budget, ButtonCANCEL, ButtonOK, Card, Card10, Card11, Card12, Card13, Card14, Card15, Card16, Card17, Card18, Card19, Card2, Card20, Card21, Card22, Card23, Card24, Card25, Card26, Card27, Card28, Card29, Card3, Card30, Card31, Card32, Card33, Card34, Card35, Card36, Card4, Card5, Card6, Card7, Card8, Card9, Card99, CardBase, Consumer, Deck, HandSpace, LogSpace, Point, PrivateSpace, PublicSpace, RoundDeck, SpaceBase, Stock, Unpaid, Worker,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SpaceBase = (function() {
  function SpaceBase() {}

  SpaceBase.DIV_ID = null;

  SpaceBase.STATUS_USABLE = 0;

  SpaceBase.STATUS_WORKED = 1;

  SpaceBase.STATUS_DISABLED = 2;

  SpaceBase.IMG_DISABLER = './img/disabler.png';

  SpaceBase.IMG_WORKER = './img/worker.png';

  SpaceBase.init = function() {

    /*
    e = @getElement()
    e.html(@DIV_ID)
     */
  };

  SpaceBase.getElement = function() {
    return $('#' + this.DIV_ID);
  };

  return SpaceBase;

})();

Budget = (function(superClass) {
  extend(Budget, superClass);

  function Budget() {
    return Budget.__super__.constructor.apply(this, arguments);
  }

  Budget.DIV_ID = 'budget';

  Budget.money = 0;

  Budget.init = function() {
    Budget.__super__.constructor.init.call(this);
    this.money = 0;
    return this.redraw();
  };

  Budget.push = function(amount) {
    if (amount < 0) {
      return false;
    }
    return this.money += amount;
  };

  Budget.pull = function(amount) {
    if (amount < 0) {
      return false;
    }
    if (this.money < amount) {
      return false;
    }
    return this.money -= amount;
  };

  Budget.getAmount = function() {
    return this.money;
  };

  Budget.redraw = function() {
    return this.getElement().html('$ ' + this.getAmount());
  };

  return Budget;

})(SpaceBase);

ButtonOK = (function(superClass) {
  extend(ButtonOK, superClass);

  function ButtonOK() {
    return ButtonOK.__super__.constructor.apply(this, arguments);
  }

  ButtonOK.DIV_ID = 'ok';

  ButtonOK.init = function() {
    this.disable();
    this.getElement().off('click');
    return this.getElement().on('click', function() {
      return Game.pushOK();
    });
  };

  ButtonOK.enable = function() {
    return this.getElement().prop("disabled", false).removeClass("disabled");
  };

  ButtonOK.disable = function() {
    return this.getElement().prop("disabled", true).addClass("disabled");
  };

  return ButtonOK;

})(SpaceBase);

ButtonCANCEL = (function(superClass) {
  extend(ButtonCANCEL, superClass);

  function ButtonCANCEL() {
    return ButtonCANCEL.__super__.constructor.apply(this, arguments);
  }

  ButtonCANCEL.DIV_ID = 'cancel';

  ButtonCANCEL.init = function() {
    this.disable();
    this.getElement().off('click');
    return this.getElement().on('click', function() {
      return Game.pushCANCEL();
    });
  };

  ButtonCANCEL.enable = function() {
    return this.getElement().prop("disabled", false).removeClass("disabled");
  };

  ButtonCANCEL.disable = function() {
    return this.getElement().prop("disabled", true).addClass("disabled");
  };

  return ButtonCANCEL;

})(SpaceBase);

Card = (function() {
  function Card() {}

  Card.CARD_NUM_KOUZAN = 2;

  Card.CARD_NUM_YAKIHATA = 15;

  Card.CARD_NUM_SOUKO = 20;

  Card.CARD_NUM_HOURITU = 22;

  Card.CARD_NUM_SYATAKU = 21;

  Card.CARD_NUM_HUDOUSAN = 26;

  Card.CARD_NUM_NOUKYOU = 27;

  Card.CARD_NUM_ROUSO = 31;

  Card.CARD_NUM_RAIL = 35;

  Card.CARD_NUM_BUILDING = 36;

  Card.CARD_NUM_CONSUMER = 99;

  Card.getClass = function(classNum) {
    var error, res;
    try {
      res = eval("Card" + classNum);
    } catch (error) {
      return false;
    }
    if (res == null) {
      return false;
    }
    return res;
  };

  return Card;

})();

CardBase = (function() {
  function CardBase() {}

  CardBase.NAME = null;

  CardBase.CATEGORY = null;

  CardBase.DESCRIPTION = null;

  CardBase.COST = 0;

  CardBase.PRICE = 0;

  CardBase.isRightClick = function() {
    var l, r, ref;
    ref = this.requireCards(), l = ref[0], r = ref[1];
    return r > 0;
  };

  CardBase.requireCards = function() {
    return [0, 0];
  };

  CardBase.getSelectMessage = function() {
    return false;
  };

  CardBase.preUse = false;

  CardBase.use = function(leftIndexs, rightIndexs) {
    var leftReqNum, ref, rightReqNum;
    if (leftIndexs == null) {
      leftIndexs = [];
    }
    if (rightIndexs == null) {
      rightIndexs = [];
    }
    ref = this.requireCards(), leftReqNum = ref[0], rightReqNum = ref[1];
    if (!(leftIndexs.length === leftReqNum && rightIndexs.length === rightReqNum)) {
      return false;
    }
    return true;
  };

  CardBase.getName = function() {
    return this.NAME;
  };

  CardBase.getCategory = function() {
    return this.CATEGORY;
  };

  CardBase.getNumber = function() {
    var res;
    res = this.name.match(/^Card(\d+)$/);
    if (res != null) {
      return Number(res[1]);
    }
    return false;
  };

  CardBase.getDescription = function() {
    return this.DESCRIPTION;
  };

  CardBase.isPublicOnly = function() {
    return this.CATEGORY === '公共';
  };

  CardBase.isBuildable = function() {
    return this.CATEGORY !== '消費財';
  };

  CardBase.isFarming = function() {
    return this.CATEGORY === '農業';
  };

  CardBase.isIndustry = function() {
    return this.CATEGORY === '工業';
  };

  CardBase.isInstitution = function() {
    return this.CATEGORY === '施設';
  };

  CardBase.isConsumer = function() {
    return this.CATEGORY === '消費財';
  };

  CardBase.isWorkable = function() {
    if (this.isConsumer()) {
      return false;
    }
    if (this.isInstitution()) {
      return false;
    }
    return true;
  };

  CardBase.isSellable = function() {
    return this.isWorkable();
  };

  CardBase.getCost = function() {
    return this.COST;
  };

  CardBase.getPrice = function() {
    return this.PRICE;
  };

  CardBase.getPoint = function() {
    return this.PRICE * 2;
  };

  CardBase.getImagePath = function() {
    return './img/card/' + this.getNumber() + '.jpg';
  };

  CardBase.getImageObj = function() {
    return $('<img>').attr('src', this.getImagePath());
  };

  return CardBase;

})();

Card2 = (function(superClass) {
  extend(Card2, superClass);

  function Card2() {
    return Card2.__super__.constructor.apply(this, arguments);
  }

  Card2.NAME = "鉱山";

  Card2.CATEGORY = "公共";

  Card2.DESCRIPTION = "カードを1枚引く\n何度でも使える";

  Card2.use = function() {
    Game.pullDeck();
    return true;
  };

  return Card2;

})(CardBase);

Card3 = (function(superClass) {
  extend(Card3, superClass);

  function Card3() {
    return Card3.__super__.constructor.apply(this, arguments);
  }

  Card3.NAME = "学校";

  Card3.CATEGORY = "公共";

  Card3.DESCRIPTION = "労働者を1人増やす";

  Card3.use = function() {
    if (Worker.isLimit()) {
      return "労働者が上限に達しています";
    }
    Worker.add();
    return true;
  };

  return Card3;

})(CardBase);

Card4 = (function(superClass) {
  extend(Card4, superClass);

  function Card4() {
    return Card4.__super__.constructor.apply(this, arguments);
  }

  Card4.NAME = "大工";

  Card4.CATEGORY = "公共";

  Card4.DESCRIPTION = "建物を1つ作る";

  Card4.requireCards = function() {
    return [1, 1];
  };

  Card4.getSelectMessage = function() {
    return "選択してください\n左クリック：建物1枚\n右クリック：捨札（建物コストの枚数）";
  };

  Card4.use = function(leftIndexs, rightIndexs) {
    var buildCardIndex, buildCardNum, cardClass, cost;
    if (leftIndexs.length !== 1) {
      return "建物1枚を選択しなければなりません";
    }
    buildCardIndex = leftIndexs[0];
    buildCardNum = HandSpace.getCardNum(buildCardIndex);
    cardClass = HandSpace.getCardClass(buildCardIndex);
    cost = cardClass.getCost();
    if (!cardClass.isBuildable()) {
      return "消費財は建設できません";
    }
    if (cost !== rightIndexs.length) {
      return "捨札が建設コストと一致していません";
    }
    PrivateSpace.push(buildCardNum);
    HandSpace.trash(rightIndexs, leftIndexs);
    return true;
  };

  return Card4;

})(CardBase);

Card5 = (function(superClass) {
  extend(Card5, superClass);

  function Card5() {
    return Card5.__super__.constructor.apply(this, arguments);
  }

  Card5.NAME = "露店";

  Card5.CATEGORY = "公共";

  Card5.DESCRIPTION = "手札を1枚捨てる\n家計から$6を得る";

  Card5.requireCards = function() {
    return [1, 0];
  };

  Card5.getSelectMessage = function() {
    return "選択してください\n左クリック：捨札1枚";
  };

  Card5.use = function(leftIndexs) {
    if (!Card5.__super__.constructor.use.apply(this, arguments)) {
      return "捨札1枚が選択されていません";
    }
    if (Budget.getAmount() < 6) {
      return '家計が$6未満なので回収できません';
    }
    Stock.push(6);
    Budget.pull(6);
    HandSpace.trash(leftIndexs);
    return true;
  };

  return Card5;

})(CardBase);

Card6 = (function(superClass) {
  extend(Card6, superClass);

  function Card6() {
    return Card6.__super__.constructor.apply(this, arguments);
  }

  Card6.NAME = "市場";

  Card6.CATEGORY = "公共";

  Card6.DESCRIPTION = "手札を2枚捨てる\n家計から$12を得る";

  Card6.requireCards = function() {
    return [2, 0];
  };

  Card6.getSelectMessage = function() {
    return "選択してください\n左クリック：捨札2枚";
  };

  Card6.use = function(leftIndexs) {
    if (!Card6.__super__.constructor.use.apply(this, arguments)) {
      return "捨札2枚が選択されていません";
    }
    if (Budget.getAmount() < 12) {
      return '家計が$12未満なので回収できません';
    }
    Stock.push(12);
    Budget.pull(12);
    HandSpace.trash(leftIndexs);
    return true;
  };

  return Card6;

})(CardBase);

Card7 = (function(superClass) {
  extend(Card7, superClass);

  function Card7() {
    return Card7.__super__.constructor.apply(this, arguments);
  }

  Card7.NAME = "高等学校";

  Card7.CATEGORY = "公共";

  Card7.DESCRIPTION = "労働者を4人に増やす";

  Card7.use = function() {
    if (Worker.getTotal() >= 4) {
      return "既に労働者が4人以上います";
    }
    Worker.setMax(4);
    return true;
  };

  return Card7;

})(CardBase);

Card8 = (function(superClass) {
  extend(Card8, superClass);

  function Card8() {
    return Card8.__super__.constructor.apply(this, arguments);
  }

  Card8.NAME = "スーパーマーケット";

  Card8.CATEGORY = "公共";

  Card8.DESCRIPTION = "手札を3枚捨てる\n家計から$18を得る";

  Card8.requireCards = function() {
    return [3, 0];
  };

  Card8.getSelectMessage = function() {
    return "選択してください\n左クリック：捨札3枚";
  };

  Card8.use = function(leftIndexs) {
    if (!Card8.__super__.constructor.use.apply(this, arguments)) {
      return "捨札3枚が選択されていません";
    }
    if (Budget.getAmount() < 18) {
      return '家計が$18未満なので回収できません';
    }
    Stock.push(18);
    Budget.pull(18);
    HandSpace.trash(leftIndexs);
    return true;
  };

  return Card8;

})(CardBase);

Card9 = (function(superClass) {
  extend(Card9, superClass);

  function Card9() {
    return Card9.__super__.constructor.apply(this, arguments);
  }

  Card9.NAME = "大学";

  Card9.CATEGORY = "公共";

  Card9.DESCRIPTION = "労働者を5人に増やす";

  Card9.use = function(leftIndexs, rightIndexs) {
    if (Worker.getTotal() >= 5) {
      return "既に労働者が5人以上います";
    }
    Worker.setMax(5);
    return true;
  };

  return Card9;

})(CardBase);

Card10 = (function(superClass) {
  extend(Card10, superClass);

  function Card10() {
    return Card10.__super__.constructor.apply(this, arguments);
  }

  Card10.NAME = "百貨店";

  Card10.CATEGORY = "公共";

  Card10.DESCRIPTION = "手札を4枚捨てる\n家計から$24を得る";

  Card10.requireCards = function() {
    return [4, 0];
  };

  Card10.getSelectMessage = function() {
    return "選択してください\n左クリック：捨札4枚";
  };

  Card10.use = function(leftIndexs) {
    if (!Card10.__super__.constructor.use.apply(this, arguments)) {
      return "捨札4枚が選択されていません";
    }
    if (Budget.getAmount() < 24) {
      return '家計が$24未満なので回収できません';
    }
    Stock.push(24);
    Budget.pull(24);
    HandSpace.trash(leftIndexs);
    return true;
  };

  return Card10;

})(CardBase);

Card11 = (function(superClass) {
  extend(Card11, superClass);

  function Card11() {
    return Card11.__super__.constructor.apply(this, arguments);
  }

  Card11.NAME = "専門学校";

  Card11.CATEGORY = "公共";

  Card11.DESCRIPTION = "労働者を1人増やす\nこのラウンドからすぐ働ける";

  Card11.use = function() {
    if (Worker.isLimit()) {
      return "労働者が上限に達しています";
    }
    Worker.add(true);
    return true;
  };

  return Card11;

})(CardBase);

Card12 = (function(superClass) {
  extend(Card12, superClass);

  function Card12() {
    return Card12.__super__.constructor.apply(this, arguments);
  }

  Card12.NAME = "万博";

  Card12.CATEGORY = "公共";

  Card12.DESCRIPTION = "手札を5枚捨てる\n家計から$30を得る";

  Card12.requireCards = function() {
    return [5, 0];
  };

  Card12.getSelectMessage = function() {
    return "選択してください\n左クリック：捨札5枚";
  };

  Card12.use = function(leftIndexs) {
    if (!Card12.__super__.constructor.use.apply(this, arguments)) {
      return "捨札5枚が選択されていません";
    }
    if (Budget.getAmount() < 30) {
      return '家計が$30未満なので回収できません';
    }
    Stock.push(30);
    Budget.pull(30);
    HandSpace.trash(leftIndexs);
    return true;
  };

  return Card12;

})(CardBase);

Card13 = (function(superClass) {
  extend(Card13, superClass);

  function Card13() {
    return Card13.__super__.constructor.apply(this, arguments);
  }

  Card13.NAME = "農場";

  Card13.CATEGORY = "農業";

  Card13.DESCRIPTION = "消費財を2枚引く";

  Card13.COST = 1;

  Card13.PRICE = 3;

  Card13.use = function() {
    Game.pullConsumer(2);
    return true;
  };

  return Card13;

})(CardBase);

Card14 = (function(superClass) {
  extend(Card14, superClass);

  function Card14() {
    return Card14.__super__.constructor.apply(this, arguments);
  }

  Card14.NAME = "設計事務所";

  Card14.DESCRIPTION = "カードを5枚めくり公開する\nうち1枚を引いて残りを捨てる";

  Card14.COST = 1;

  Card14.PRICE = 4;

  Card14.preUse = function() {
    Game.pullDeck(5);
    return Game.flagSekkei = true;
  };

  Card14.requireCards = function() {
    return [4, 0];
  };

  Card14.getSelectMessage = function() {
    return "選択してください\n左クリック：捨札4枚\n（最後に引いた5枚の中から）";
  };

  Card14.use = function(leftIndexs) {
    var count, index, j, ref, ref1;
    if (!Card14.__super__.constructor.use.apply(this, arguments)) {
      return "捨札4枚が選択されていません";
    }
    count = 0;
    for (index = j = ref = HandSpace.getAmount() - 5, ref1 = HandSpace.getAmount(); ref <= ref1 ? j < ref1 : j > ref1; index = ref <= ref1 ? ++j : --j) {
      if (leftIndexs.in_array(index)) {
        count++;
      }
    }
    if (count !== 4) {
      return "最後に引いた5枚のうちの4枚が選択されていません";
    }
    HandSpace.trash(leftIndexs);
    Game.flagSekkei = false;
    return true;
  };

  return Card14;

})(CardBase);

Card15 = (function(superClass) {
  extend(Card15, superClass);

  function Card15() {
    return Card15.__super__.constructor.apply(this, arguments);
  }

  Card15.NAME = "焼畑";

  Card15.CATEGORY = "農業";

  Card15.DESCRIPTION = "消費財を5枚引く\n焼畑は消滅する\n売却不可";

  Card15.COST = 1;

  Card15.PRICE = 0;

  Card15.isSellable = function() {
    return false;
  };

  Card15.use = function(leftIndexs, rightIndexs, kubun, index) {
    var space;
    Game.pullConsumer(5);
    Game.flagYakihata = true;
    space = Game.kubun2class(kubun);
    space.pull(index);
    Deck.trash(this.CARD_NUM_YAKIHATA);
    return true;
  };

  return Card15;

})(CardBase);

Card16 = (function(superClass) {
  extend(Card16, superClass);

  function Card16() {
    return Card16.__super__.constructor.apply(this, arguments);
  }

  Card16.NAME = "珈琲店";

  Card16.DESCRIPTION = "家計から$5を得る";

  Card16.COST = 1;

  Card16.PRICE = 4;

  Card16.use = function() {
    if (Budget.getAmount() < 5) {
      return '家計が$5未満なので回収できません';
    }
    Stock.push(5);
    Budget.pull(5);
    return true;
  };

  return Card16;

})(CardBase);

Card17 = (function(superClass) {
  extend(Card17, superClass);

  function Card17() {
    return Card17.__super__.constructor.apply(this, arguments);
  }

  Card17.NAME = "工場";

  Card17.CATEGORY = "工業";

  Card17.DESCRIPTION = "手札を2枚捨てる\nカードを4枚引く";

  Card17.COST = 2;

  Card17.PRICE = 6;

  Card17.requireCards = function() {
    return [2, 0];
  };

  Card17.getSelectMessage = function() {
    return "選択してください\n左クリック：捨札2枚";
  };

  Card17.use = function(leftIndexs) {
    if (!Card17.__super__.constructor.use.apply(this, arguments)) {
      return "捨札2枚が選択されていません";
    }
    HandSpace.trash(leftIndexs);
    Game.pullDeck(4);
    return true;
  };

  return Card17;

})(CardBase);

Card18 = (function(superClass) {
  extend(Card18, superClass);

  function Card18() {
    return Card18.__super__.constructor.apply(this, arguments);
  }

  Card18.NAME = "建設会社";

  Card18.DESCRIPTION = "1少ないコストで建物を1つ作る\n";

  Card18.COST = 2;

  Card18.PRICE = 5;

  Card18.requireCards = function() {
    return [1, 1];
  };

  Card18.getSelectMessage = function() {
    return "選択してください\n左クリック：建物1枚\n右クリック：捨札（建設コスト-1の枚数）";
  };

  Card18.use = function(leftIndexs, rightIndexs) {
    var buildCardIndex, buildCardNum, cardClass, cost;
    if (leftIndexs.length !== 1) {
      return "建物を1枚選択しなければなりません";
    }
    buildCardIndex = leftIndexs[0];
    buildCardNum = HandSpace.getCardNum(buildCardIndex);
    cardClass = HandSpace.getCardClass(buildCardIndex);
    cost = cardClass.getCost();
    if (!cardClass.isBuildable()) {
      return "消費財は建設できません";
    }
    if (cost - 1 !== rightIndexs.length) {
      return "捨札が建設コストと一致していません";
    }
    PrivateSpace.push(buildCardNum);
    HandSpace.trash(rightIndexs, leftIndexs);
    return true;
  };

  return Card18;

})(CardBase);

Card19 = (function(superClass) {
  extend(Card19, superClass);

  function Card19() {
    return Card19.__super__.constructor.apply(this, arguments);
  }

  Card19.NAME = "果樹園";

  Card19.CATEGORY = "農業";

  Card19.DESCRIPTION = "手札が4枚になるまで消費財を引く";

  Card19.COST = 2;

  Card19.PRICE = 5;

  Card19.use = function() {
    if (HandSpace.getAmount() >= 4) {
      return "手札が4枚以上なので置けません";
    }
    Game.pullConsumer(4 - HandSpace.getAmount());
    return true;
  };

  return Card19;

})(CardBase);

Card20 = (function(superClass) {
  extend(Card20, superClass);

  function Card20() {
    return Card20.__super__.constructor.apply(this, arguments);
  }

  Card20.NAME = "倉庫";

  Card20.CATEGORY = "施設";

  Card20.DESCRIPTION = "手札上限+4\n（パッシブ）\n売却不可";

  Card20.COST = 2;

  Card20.PRICE = 5;

  return Card20;

})(CardBase);

Card21 = (function(superClass) {
  extend(Card21, superClass);

  function Card21() {
    return Card21.__super__.constructor.apply(this, arguments);
  }

  Card21.NAME = "社宅";

  Card21.CATEGORY = "施設";

  Card21.DESCRIPTION = "労働者上限+1\n（パッシブ）\n売却不可";

  Card21.COST = 2;

  Card21.PRICE = 4;

  return Card21;

})(CardBase);

Card22 = (function(superClass) {
  extend(Card22, superClass);

  function Card22() {
    return Card22.__super__.constructor.apply(this, arguments);
  }

  Card22.NAME = "法律事務所";

  Card22.CATEGORY = "施設";

  Card22.DESCRIPTION = "終了時：負債から5枚まで免除する\n売却不可";

  Card22.COST = 2;

  Card22.PRICE = 4;

  return Card22;

})(CardBase);

Card23 = (function(superClass) {
  extend(Card23, superClass);

  function Card23() {
    return Card23.__super__.constructor.apply(this, arguments);
  }

  Card23.NAME = "大農園";

  Card23.CATEGORY = "農業";

  Card23.DESCRIPTION = "消費財を3枚引く";

  Card23.COST = 3;

  Card23.PRICE = 6;

  Card23.use = function() {
    Game.pullConsumer(3);
    return true;
  };

  return Card23;

})(CardBase);

Card24 = (function(superClass) {
  extend(Card24, superClass);

  function Card24() {
    return Card24.__super__.constructor.apply(this, arguments);
  }

  Card24.NAME = "レストラン";

  Card24.DESCRIPTION = "手札を1枚捨てる\n家計から$15を得る";

  Card24.COST = 3;

  Card24.PRICE = 8;

  Card24.requireCards = function() {
    return [1, 0];
  };

  Card24.getSelectMessage = function() {
    return "選択してください\n左クリック：捨札1枚";
  };

  Card24.use = function(leftIndexs) {
    if (!Card24.__super__.constructor.use.apply(this, arguments)) {
      return "捨札1枚が選択されていません";
    }
    if (Budget.getAmount() < 15) {
      return '家計が$15未満なので回収できません';
    }
    Stock.push(15);
    Budget.pull(15);
    HandSpace.trash(leftIndexs);
    return true;
  };

  return Card24;

})(CardBase);

Card25 = (function(superClass) {
  extend(Card25, superClass);

  function Card25() {
    return Card25.__super__.constructor.apply(this, arguments);
  }

  Card25.NAME = "開拓民";

  Card25.DESCRIPTION = "手札の農業カテゴリの建物を1つコスト0で作る";

  Card25.COST = 3;

  Card25.PRICE = 7;

  Card25.requireCards = function() {
    return [1, 0];
  };

  Card25.getSelectMessage = function() {
    return "選択してください\n左クリック：農業カテゴリの建物1枚";
  };

  Card25.use = function(leftIndexs) {
    var buildCardIndex, buildCardNum, cardClass;
    if (leftIndexs.length !== 1) {
      return "建物を1枚選択しなければなりません";
    }
    buildCardIndex = leftIndexs[0];
    buildCardNum = HandSpace.getCardNum(buildCardIndex);
    cardClass = HandSpace.getCardClass(buildCardIndex);
    if (!cardClass.isFarming()) {
      return "建物が農業カテゴリではありません";
    }
    PrivateSpace.push(buildCardNum);
    HandSpace.trash([], leftIndexs);
    return true;
  };

  return Card25;

})(CardBase);

Card26 = (function(superClass) {
  extend(Card26, superClass);

  function Card26() {
    return Card26.__super__.constructor.apply(this, arguments);
  }

  Card26.NAME = "不動産屋";

  Card26.CATEGORY = "施設";

  Card26.DESCRIPTION = "終了時：所有する建物1つにつき+3点\n（この建物を含む）\n売却不可";

  Card26.COST = 3;

  Card26.PRICE = 5;

  return Card26;

})(CardBase);

Card27 = (function(superClass) {
  extend(Card27, superClass);

  function Card27() {
    return Card27.__super__.constructor.apply(this, arguments);
  }

  Card27.NAME = "農協";

  Card27.CATEGORY = "施設";

  Card27.DESCRIPTION = "終了時：手札の消費財1枚につき+3点\n売却不可";

  Card27.COST = 3;

  Card27.PRICE = 6;

  return Card27;

})(CardBase);

Card28 = (function(superClass) {
  extend(Card28, superClass);

  function Card28() {
    return Card28.__super__.constructor.apply(this, arguments);
  }

  Card28.NAME = "製鉄所";

  Card28.CATEGORY = "工業";

  Card28.DESCRIPTION = "カードを3枚引く";

  Card28.COST = 4;

  Card28.PRICE = 10;

  Card28.use = function() {
    Game.pullDeck(3);
    return true;
  };

  return Card28;

})(CardBase);

Card29 = (function(superClass) {
  extend(Card29, superClass);

  function Card29() {
    return Card29.__super__.constructor.apply(this, arguments);
  }

  Card29.NAME = "ゼネコン";

  Card29.DESCRIPTION = "建物を1つ作る\nカードを2枚引く";

  Card29.COST = 4;

  Card29.PRICE = 9;

  Card29.requireCards = function() {
    return [1, 1];
  };

  Card29.getSelectMessage = function() {
    return "選択してください\n左クリック：建物1枚\n右クリック：捨札（建物コストの枚数）";
  };

  Card29.use = function(leftIndexs, rightIndexs) {
    var buildCardIndex, buildCardNum, cardClass, cost;
    if (leftIndexs.length !== 1) {
      return "建物を1枚選択しなければなりません";
    }
    buildCardIndex = leftIndexs[0];
    buildCardNum = HandSpace.getCardNum(buildCardIndex);
    cardClass = HandSpace.getCardClass(buildCardIndex);
    cost = cardClass.getCost();
    if (!cardClass.isBuildable()) {
      return "消費財は建設できません";
    }
    if (cost !== rightIndexs.length) {
      return "捨札が建設コストと一致していません";
    }
    PrivateSpace.push(buildCardNum);
    HandSpace.trash(rightIndexs, leftIndexs);
    Game.pullDeck(2);
    return true;
  };

  return Card29;

})(CardBase);

Card30 = (function(superClass) {
  extend(Card30, superClass);

  function Card30() {
    return Card30.__super__.constructor.apply(this, arguments);
  }

  Card30.NAME = "化学工場";

  Card30.CATEGORY = "工業";

  Card30.DESCRIPTION = "カードを2枚引く\n手札がなければ4枚引く";

  Card30.COST = 4;

  Card30.PRICE = 9;

  Card30.use = function() {
    if (HandSpace.getAmount() === 0) {
      Game.pullDeck(4);
    } else {
      Game.pullDeck(2);
    }
    return true;
  };

  return Card30;

})(CardBase);

Card31 = (function(superClass) {
  extend(Card31, superClass);

  function Card31() {
    return Card31.__super__.constructor.apply(this, arguments);
  }

  Card31.NAME = "労働組合";

  Card31.CATEGORY = "施設";

  Card31.DESCRIPTION = "終了時：労働者1人につき+6点\n売却不可";

  Card31.COST = 4;

  Card31.PRICE = 0;

  return Card31;

})(CardBase);

Card32 = (function(superClass) {
  extend(Card32, superClass);

  function Card32() {
    return Card32.__super__.constructor.apply(this, arguments);
  }

  Card32.NAME = "邸宅";

  Card32.CATEGORY = "施設";

  Card32.DESCRIPTION = "売却不可";

  Card32.COST = 4;

  Card32.PRICE = 14;

  return Card32;

})(CardBase);

Card33 = (function(superClass) {
  extend(Card33, superClass);

  function Card33() {
    return Card33.__super__.constructor.apply(this, arguments);
  }

  Card33.NAME = "自動車工場";

  Card33.CATEGORY = "工業";

  Card33.DESCRIPTION = "手札を3枚捨てる\nカードを7枚引く";

  Card33.COST = 5;

  Card33.PRICE = 12;

  Card33.requireCards = function() {
    return [3, 0];
  };

  Card33.getSelectMessage = function() {
    return "選択してください\n左クリック：捨札3枚";
  };

  Card33.use = function(leftIndexs) {
    if (!Card33.__super__.constructor.use.apply(this, arguments)) {
      return "捨札3枚が選択されていません";
    }
    HandSpace.trash(leftIndexs);
    Game.pullDeck(7);
    return true;
  };

  return Card33;

})(CardBase);

Card34 = (function(superClass) {
  extend(Card34, superClass);

  function Card34() {
    return Card34.__super__.constructor.apply(this, arguments);
  }

  Card34.NAME = "二胡市建設";

  Card34.DESCRIPTION = "同じコストの建物を2つ作る\n1つ分のコストだけ支払う";

  Card34.COST = 5;

  Card34.PRICE = 10;

  Card34.requireCards = function() {
    return [2, 1];
  };

  Card34.getSelectMessage = function() {
    return "選択してください\n左クリック：建物カード2枚\n右クリック：捨札（建物コストの枚数）";
  };

  Card34.use = function(leftIndexs, rightIndexs) {
    var buildCardIndex0, buildCardIndex1, buildCardNum0, buildCardNum1, cardClass0, cardClass1, cost0, cost1;
    if (leftIndexs.length !== 2) {
      return "建物を2枚選択しなければなりません";
    }
    buildCardIndex0 = leftIndexs[0];
    buildCardNum0 = HandSpace.getCardNum(buildCardIndex0);
    cardClass0 = HandSpace.getCardClass(buildCardIndex0);
    cost0 = cardClass0.getCost();
    buildCardIndex1 = leftIndexs[1];
    buildCardNum1 = HandSpace.getCardNum(buildCardIndex1);
    cardClass1 = HandSpace.getCardClass(buildCardIndex1);
    cost1 = cardClass1.getCost();
    if (!(cardClass0.isBuildable() && cardClass1.isBuildable())) {
      return "消費財は建設できません";
    }
    if (cost0 !== cost1) {
      return "建物カードのコストが一致していません";
    }
    if (cost0 !== rightIndexs.length) {
      return "捨札が建設コストと一致していません";
    }
    PrivateSpace.push(buildCardNum0);
    PrivateSpace.push(buildCardNum1);
    HandSpace.trash(rightIndexs, leftIndexs);
    return true;
  };

  return Card34;

})(CardBase);

Card35 = (function(superClass) {
  extend(Card35, superClass);

  function Card35() {
    return Card35.__super__.constructor.apply(this, arguments);
  }

  Card35.NAME = "鉄道";

  Card35.CATEGORY = "施設";

  Card35.DESCRIPTION = "終了時：所有する工業カテゴリの建物1つにつき+8点\n売却不可";

  Card35.COST = 5;

  Card35.PRICE = 9;

  return Card35;

})(CardBase);

Card36 = (function(superClass) {
  extend(Card36, superClass);

  function Card36() {
    return Card36.__super__.constructor.apply(this, arguments);
  }

  Card36.NAME = "本社ビル";

  Card36.CATEGORY = "施設";

  Card36.DESCRIPTION = "終了時：所有する施設カテゴリの建物1つにつき+6点\n売却不可";

  Card36.COST = 5;

  Card36.PRICE = 10;

  return Card36;

})(CardBase);

Card99 = (function(superClass) {
  extend(Card99, superClass);

  function Card99() {
    return Card99.__super__.constructor.apply(this, arguments);
  }

  Card99.NAME = "消費財";

  Card99.CATEGORY = "消費財";

  Card99.DESCRIPTION = "捨札や建設コストとして捨てられる";

  return Card99;

})(CardBase);

Consumer = (function() {
  function Consumer() {}

  Consumer.init = function() {};

  Consumer.pull = function() {
    return 99;
  };

  return Consumer;

})();

Deck = (function() {
  function Deck() {}

  Deck.deck = [];

  Deck.grave = [];

  Deck.init = function() {
    var amount, cardNum, def, i, j, ref;
    this.deck = [];
    def = this.getCardDefine();
    for (cardNum in def) {
      amount = def[cardNum];
      for (i = j = 0, ref = amount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        this.deck.push(Number(cardNum));
      }
    }
    this.shuffle();
    return this.grave = [];
  };

  Deck.pull = function() {
    if (this.deck.length === 0) {
      this.recycle();
    }
    return this.deck.shift();
  };

  Deck.place = function(cardNum) {
    return this.deck.unshift(Number(cardNum));
  };

  Deck.trash = function(cardNum) {
    if (cardNum === Card.CARD_NUM_CONSUMER) {
      return false;
    }
    return this.grave.push(Number(cardNum));
  };

  Deck.recycle = function() {
    var cardNum, j, len, ref;
    ref = this.grave;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      this.deck.push(Number(cardNum));
    }
    this.grave = [];
    return this.shuffle();
  };

  Deck.shuffle = function() {
    var copy, i, n;
    copy = [];
    n = this.deck.length;
    while (n) {
      i = Math.floor(Math.random() * n--);
      copy.push(this.deck.splice(i, 1)[0]);
    }
    return this.deck = copy;
  };

  Deck.getCardDefine = function() {
    var res;
    res = {
      13: 7,
      14: 4,
      15: 2,
      16: 2,
      17: 7,
      18: 4,
      19: 3,
      20: 3,
      21: 2,
      22: 1,
      23: 3,
      24: 2,
      25: 2,
      26: 2,
      27: 1,
      28: 3,
      29: 3,
      30: 2,
      31: 1,
      32: 1,
      33: 3,
      34: 2,
      35: 1,
      36: 1
    };
    return res;
  };

  return Deck;

})();

window.Game = (function() {
  function Game() {}

  Game.objs = {};

  Game.isSetObj = false;

  Game.isClickable = false;

  Game.waitChoice = false;

  Game.isHandTrash = false;

  Game.isSell = false;

  Game.isGameEnd = false;

  Game.flagYakihata = false;

  Game.flagSekkei = false;

  Game.init = function() {
    var name, obj, ref;
    this.isClickable = false;
    this.setObj();
    ref = this.objs;
    for (name in ref) {
      obj = ref[name];
      obj.init();
    }
    this.refresh();
    this.waitChoice = false;
    this.isHandTrash = false;
    this.isSell = false;
    this.isGameEnd = false;
    this.flagYakihata = false;
    this.flagSekkei = false;
    return this.isClickable = true;
  };

  Game.refresh = function() {
    this.objs["public"].redraw();
    this.objs["private"].redraw();
    this.objs.hand.redraw();
    this.objs.budget.redraw();
    this.objs.stock.redraw();
    this.objs.unpaid.redraw();
    this.objs.point.redraw();
    this.objs.worker.redraw();
    return this.objs.round.redraw();
  };

  Game.setObj = function() {
    if (this.isSetObj) {
      return;
    }
    this.isSetObj = true;
    this.objs["public"] = PublicSpace;
    this.objs["private"] = PrivateSpace;
    this.objs.hand = HandSpace;
    this.objs.log = LogSpace;
    this.objs.round = RoundDeck;
    this.objs.deck = Deck;
    this.objs.consumer = Consumer;
    this.objs.budget = Budget;
    this.objs.stock = Stock;
    this.objs.unpaid = Unpaid;
    this.objs.point = Point;
    this.objs.worker = Worker;
    this.objs.ok = ButtonOK;
    return this.objs.cancel = ButtonCANCEL;
  };

  Game.gameStart = function() {
    this.isClickable = false;
    this.init();
    this.pullDeck(3);
    this.objs.deck.place(17);
    this.pullPublic(4);
    return this.clickable();
  };

  Game.gameEnd = function() {
    this.isGameEnd = true;
    this.refresh();
    return this.logScore();
  };

  Game.logScore = function() {
    var buildNum, buildPoint, consumerNum, honsyaNum, honsyaPoint, hourituNum, hourituOnkei, hudousanNum, hudousanPoint, industryNum, logStr, noukyouNum, noukyouPoint, point, railNum, railPoint, ref, rousoNum, rousoPoint, stock, unpaid, unpaidPoint, unworkNum, workerNum;
    ref = this.getPoint(true), stock = ref[0], buildPoint = ref[1], unpaid = ref[2], hourituNum = ref[3], hudousanNum = ref[4], buildNum = ref[5], noukyouNum = ref[6], consumerNum = ref[7], rousoNum = ref[8], workerNum = ref[9], railNum = ref[10], industryNum = ref[11], honsyaNum = ref[12], unworkNum = ref[13], point = ref[14];
    unpaidPoint = unpaid * 3;
    hourituOnkei = unpaid > hourituNum * 5 ? hourituNum * 5 * 3 : unpaid * 3;
    hudousanPoint = hudousanNum * buildNum * 3;
    noukyouPoint = noukyouNum * consumerNum * 3;
    rousoPoint = rousoNum * workerNum * 6;
    railPoint = railNum * industryNum * 8;
    honsyaPoint = honsyaNum * unworkNum * 6;
    logStr = "ゲーム終了　スコア：$" + point + "\n<hr>\n<table class=\"score\">\n<tr>\n  <td>資金</td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td>$" + stock + "</td>\n</tr>\n<tr>\n  <td>建物の価値</td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td>$" + buildPoint + "</td>\n</tr>\n<tr>\n  <td>未払い賃金</td>\n  <td></td>\n  <td></td>\n  <td></td>\n  <td>-$" + unpaid + "</td>\n  <td>×</td>\n  <td>3</td>\n  <td>=></td>\n  <td>-$" + unpaidPoint + "</td>\n</tr>\n<tr>\n  <td>法律事務所</td>\n  <td>" + hourituNum + "件</td>\n  <td>×</td>\n  <td></td>\n  <td>$5</td>\n  <td>×</td>\n  <td>3</td>\n  <td>=></td>\n  <td>$" + hourituOnkei + "</td>\n</tr>\n<tr>\n  <td>不動産屋</td>\n  <td>" + hudousanNum + "件</td>\n  <td>×</td>\n  <td>建物</td>\n  <td>" + buildNum + "件</td>\n  <td>×</td>\n  <td>3</td>\n  <td>=></td>\n  <td>$" + hudousanPoint + "</td>\n</tr>\n<tr>\n  <td>農協</td>\n  <td>" + noukyouNum + "件</td>\n  <td>×</td>\n  <td>消費財</td>\n  <td>" + consumerNum + "枚</td>\n  <td>×</td>\n  <td>3</td>\n  <td>=></td>\n  <td>$" + noukyouPoint + "</td>\n</tr>\n<tr>\n  <td>労働組合</td>\n  <td>" + rousoNum + "件</td>\n  <td>×</td>\n  <td>労働者</td>\n  <td>" + workerNum + "人</td>\n  <td>×</td>\n  <td>6</td>\n  <td>=></td>\n  <td>$" + rousoPoint + "</td>\n</tr>\n<tr>\n  <td>鉄道</td>\n  <td>" + railNum + "件</td>\n  <td>×</td>\n  <td>工業</td>\n  <td>" + industryNum + "件</td>\n  <td>×</td>\n  <td>8</td>\n  <td>=></td>\n  <td>$" + railPoint + "</td>\n</tr>\n<tr>\n  <td>本社ビル</td>\n  <td>" + honsyaNum + "件</td>\n  <td>×</td>\n  <td>施設</td>\n  <td>" + unworkNum + "件</td>\n  <td>×</td>\n  <td>6</td>\n  <td>=></td>\n  <td>$" + honsyaPoint + "</td>\n</tr>\n</table>\n<hr>\n<button id=\"start\" onclick=\"Game.gameStart()\">もう一度やる</button>";
    return LogSpace.addInfo(logStr);
  };

  Game.roundEnd = function() {
    var max, message, rest;
    this.isClickable = false;
    LogSpace.removeAll();
    if (HandSpace.isHandOver()) {
      max = HandSpace.getMax();
      LogSpace.addWarn('手札を' + max + '枚になるまで捨ててください');
      this.isHandTrash = true;
      return;
    }
    this.isHandTrash = false;
    if (this.isMustSell()) {
      rest = Worker.getTotal() * RoundDeck.getSalary() - Stock.getAmount();
      message = "給料が払えるようになるか、なくなるまで建物を売ってください\n不足額：$" + rest;
      LogSpace.addWarn(message.replace(/\n/g, '<br>'));
      this.isSell = true;
      return;
    }
    this.isSell = false;
    return this.settle();
  };

  Game.settle = function() {
    var alertStr, minusSalary, penalty;
    minusSalary = this.objs.worker.getTotal() * this.objs.round.getSalary();
    penalty = minusSalary - this.objs.stock.getAmount();
    penalty = penalty > 0 ? penalty : 0;
    alertStr = "ラウンド終了";
    alertStr += "\n\n";
    alertStr += "給料 $" + minusSalary + " を支払います\n";
    if (penalty !== 0) {
      alertStr += "支払えなかった $" + penalty + " が未払いになります";
    }
    LogSpace.addInfoInstant(alertStr.replace(/\n/g, '<br>'), 5);
    Stock.pull(minusSalary);
    Budget.push(minusSalary - penalty);
    Unpaid.push(penalty);
    RoundDeck.addRound();
    if (RoundDeck.getRound() >= 10) {
      return this.gameEnd();
    }
    this.pullPublic();
    PublicSpace.resetStatus();
    PrivateSpace.resetStatus();
    Worker.wake();
    this.refresh();
    return this.clickable();
  };

  Game.clickable = function() {
    this.waitChoice = false;
    this.isHandTrash = false;
    this.isSell = false;
    return this.isClickable = true;
  };

  Game.turnEnd = function(kubun, index) {
    var spaceClass;
    this.isClickable = false;
    spaceClass = this.kubun2class(kubun);
    Worker.work();
    if (this.flagYakihata) {
      this.flagYakihata = false;
    } else {
      spaceClass.setWorked(index);
    }
    PublicSpace.disableLastest();
    this.refresh();
    if (Worker.getActive() <= 0) {
      return this.roundEnd();
    } else {
      return this.clickable();
    }
  };

  Game.handClickLeft = function(index) {
    if (this.isGameEnd) {
      return false;
    }
    if (this.waitChoice === false) {
      return false;
    }
    HandSpace.clickLeft(index);
    return HandSpace.redraw();
  };

  Game.handClickRight = function(index) {
    if (this.isGameEnd) {
      return false;
    }
    if (this.waitChoice === false) {
      return false;
    }
    if (this.waitChoice[2] === false) {
      return false;
    }
    HandSpace.clickRight(index);
    return HandSpace.redraw();
  };

  Game.handDoubleClick = function(index) {
    if (this.isGameEnd) {
      return false;
    }
    if (!this.isHandTrash) {
      return false;
    }
    HandSpace.trash([index]);
    HandSpace.redraw();
    return this.roundEnd();
  };

  Game.pushOK = function() {
    var _, backupWaitChoice, cardClass, cardIndex, index, j, kubun, left, ref, ref1, res, right, spaceClass;
    if (this.isGameEnd) {
      return false;
    }
    if (this.waitChoice === false) {
      return false;
    }
    backupWaitChoice = this.waitChoice.concat();
    ref = this.waitChoice, kubun = ref[0], cardIndex = ref[1], _ = ref[2];
    this.waitChoice = false;
    left = [];
    right = [];
    for (index = j = 0, ref1 = this.objs.hand.getAmount(); 0 <= ref1 ? j < ref1 : j > ref1; index = 0 <= ref1 ? ++j : --j) {
      if (HandSpace.getSelect(index) === HandSpace.SELECT_LEFT) {
        left.push(index);
      }
      if (HandSpace.getSelect(index) === HandSpace.SELECT_RIGHT) {
        right.push(index);
      }
    }
    HandSpace.selectReset();
    ButtonOK.disable();
    ButtonCANCEL.disable();
    spaceClass = this.kubun2class(kubun);
    cardClass = spaceClass.getCardClass(cardIndex);
    if (!this.flagSekkei) {
      LogSpace.removeAll();
    }
    res = cardClass.use(left, right);
    if (res === true) {
      LogSpace.removeAll();
      this.turnEnd(kubun, cardIndex);
    } else {
      LogSpace.addFatalInstant(res);
      HandSpace.redraw();
      if (this.flagSekkei) {
        ButtonOK.enable();
        this.waitChoice = backupWaitChoice;
      } else {
        this.clickable();
      }
    }
    return res === true;
  };

  Game.pushCANCEL = function() {
    if (this.isGameEnd) {
      return false;
    }
    if (this.waitChoice === false) {
      return false;
    }
    if (this.flagSekkei !== false) {
      return false;
    }
    this.waitChoice = false;
    HandSpace.selectReset();
    HandSpace.redraw();
    ButtonOK.disable();
    ButtonCANCEL.disable();
    LogSpace.removeAll();
    this.clickable();
    return true;
  };

  Game.work = function(kubun, index) {
    var cardClass, leftReqNum, ref, res, rightReqNum, spaceClass;
    if (this.isGameEnd) {
      return false;
    }
    if (!this.isClickable) {
      return false;
    }
    if (!this.kubun2class(kubun).isUsable(index)) {
      return false;
    }
    if (Worker.getActive() <= 0) {
      return false;
    }
    this.isClickable = false;
    spaceClass = this.kubun2class(kubun);
    cardClass = spaceClass.getCardClass(index);
    if (cardClass.preUse !== false) {
      cardClass.preUse();
    }
    ref = cardClass.requireCards(), leftReqNum = ref[0], rightReqNum = ref[1];
    if (leftReqNum === 0 && rightReqNum === 0) {
      res = cardClass.use([], [], kubun, index);
      if (res !== true) {
        LogSpace.addFatalInstant(res);
        this.clickable();
        return false;
      }
      this.turnEnd(kubun, index);
    } else {
      this.waitChoice = [kubun, index, cardClass.isRightClick()];
      LogSpace.addWarn(cardClass.getSelectMessage().replace(/\n/g, '<br>'));
      ButtonOK.enable();
      if (!this.flagSekkei) {
        ButtonCANCEL.enable();
      }
    }
    return true;
  };

  Game.pullDeck = function(amount) {
    var i, j, ref;
    if (amount == null) {
      amount = 1;
    }
    for (i = j = 0, ref = amount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      HandSpace.push(Deck.pull());
    }
    return HandSpace.redraw();
  };

  Game.pullConsumer = function(amount) {
    var i, j, ref;
    if (amount == null) {
      amount = 1;
    }
    for (i = j = 0, ref = amount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      HandSpace.push(Consumer.pull());
    }
    return HandSpace.redraw();
  };

  Game.pullPublic = function(amount) {
    var i, j, ref;
    if (amount == null) {
      amount = 1;
    }
    for (i = j = 0, ref = amount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      PublicSpace.push(this.objs.round.pull());
    }
    return PublicSpace.redraw();
  };

  Game.sellPrivate = function(index) {
    var deletedCardNum;
    if (!PrivateSpace.getCardClass(index).isSellable()) {
      return false;
    }
    deletedCardNum = PrivateSpace.pull(index);
    PublicSpace.push(deletedCardNum);
    Stock.push(Card.getClass(deletedCardNum).getPrice());
    PrivateSpace.redraw();
    PublicSpace.redraw();
    return this.roundEnd();
  };

  Game.isMustSell = function() {
    var canSell, cantPaySalary;
    cantPaySalary = Stock.getAmount() - Worker.getTotal() * RoundDeck.getSalary() < 0;
    canSell = PrivateSpace.isExistSellable();
    return cantPaySalary && canSell;
  };

  Game.getPoint = function(getDetail) {
    var point, unpaidNum;
    if (getDetail == null) {
      getDetail = false;
    }
    point = 0;
    point += Stock.getAmount();
    point += PrivateSpace.getPoint();
    unpaidNum = Unpaid.getAmount();
    unpaidNum -= 5 * PrivateSpace.getAmountHouritu();
    unpaidNum = unpaidNum < 0 ? 0 : unpaidNum;
    point -= unpaidNum * 3;
    point += PrivateSpace.getAmountHudousan() * PrivateSpace.getAmount() * 3;
    point += PrivateSpace.getAmountNoukyou() * HandSpace.getAmountConsumer() * 3;
    point += PrivateSpace.getAmountRouso() * Worker.getTotal() * 6;
    point += PrivateSpace.getAmountRail() * PrivateSpace.getAmountIndustry() * 8;
    point += PrivateSpace.getAmountBuilding() * PrivateSpace.getAmountInstitution() * 6;
    if (getDetail) {
      return [Stock.getAmount(), PrivateSpace.getPoint(), Unpaid.getAmount(), PrivateSpace.getAmountHouritu(), PrivateSpace.getAmountHudousan(), PrivateSpace.getAmount(), PrivateSpace.getAmountNoukyou(), HandSpace.getAmountConsumer(), PrivateSpace.getAmountRouso(), Worker.getTotal(), PrivateSpace.getAmountRail(), PrivateSpace.getAmountIndustry(), PrivateSpace.getAmountBuilding(), PrivateSpace.getAmountInstitution(), point];
    } else {
      return point;
    }
  };

  Game.kubun2class = function(kubun) {
    if (kubun === "public") {
      return PublicSpace;
    }
    return PrivateSpace;
  };

  return Game;

})();

HandSpace = (function(superClass) {
  extend(HandSpace, superClass);

  function HandSpace() {
    return HandSpace.__super__.constructor.apply(this, arguments);
  }

  HandSpace.DIV_ID = "hand";

  HandSpace.BALLOON_CLASS_NAME = 'balloon_hand';

  HandSpace.SELECT_NOT = 0;

  HandSpace.SELECT_LEFT = 1;

  HandSpace.SELECT_RIGHT = 2;

  HandSpace.cards = [];

  HandSpace.select = [];

  HandSpace.init = function() {
    HandSpace.__super__.constructor.init.call(this);
    this.cards = [];
    return this.select = [];
  };

  HandSpace.getSelect = function(index) {
    return this.select[index];
  };

  HandSpace.clickLeft = function(index) {
    if (this.select[index] === this.SELECT_LEFT) {
      return this.select[index] = this.SELECT_NOT;
    } else {
      return this.select[index] = this.SELECT_LEFT;
    }
  };

  HandSpace.clickRight = function(index) {
    if (this.select[index] === this.SELECT_RIGHT) {
      return this.select[index] = this.SELECT_NOT;
    } else {
      return this.select[index] = this.SELECT_RIGHT;
    }
  };

  HandSpace.selectReset = function() {
    var i, j, ref, results;
    this.select = [];
    results = [];
    for (i = j = 0, ref = this.cards.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      results.push(this.select.push(this.SELECT_NOT));
    }
    return results;
  };

  HandSpace.sort = function() {
    this.cards.sort();
    this.select = [];
    return this.selectReset();
  };

  HandSpace.getCardNum = function(index) {
    return this.cards[index];
  };

  HandSpace.getCardClass = function(index) {
    return Card.getClass(this.getCardNum(index));
  };

  HandSpace.getAmount = function() {
    return this.cards.length;
  };

  HandSpace.trash = function(trashCardIndexs, dropCardIndexs) {
    var index, j, k, len, newCardNums, ref, results, trashCardNum, trashCardNums;
    if (dropCardIndexs == null) {
      dropCardIndexs = [];
    }
    newCardNums = [];
    trashCardNums = [];
    for (index = j = 0, ref = this.cards.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
      if (trashCardIndexs.in_array(index)) {
        trashCardNums.push(this.cards[index]);
      } else if (dropCardIndexs.in_array(index)) {

      } else {
        newCardNums.push(this.cards[index]);
      }
    }
    this.cards = newCardNums;
    results = [];
    for (k = 0, len = trashCardNums.length; k < len; k++) {
      trashCardNum = trashCardNums[k];
      results.push(Deck.trash(trashCardNum));
    }
    return results;
  };

  HandSpace.push = function(cardNum) {
    this.cards.push(Number(cardNum));
    return this.select.push(this.SELECT_NOT);
  };

  HandSpace.redraw = function() {
    var e, index, j, me, ref, results;
    me = this.getElement();
    me.html('');
    $('.' + this.BALLOON_CLASS_NAME).remove();
    results = [];
    for (index = j = 0, ref = this.cards.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
      e = this.createElement(index);
      if (e !== false) {
        me.append(e);
      }
      if (this.select[index] === this.SELECT_LEFT) {
        e.addClass("select_left");
      }
      if (this.select[index] === this.SELECT_RIGHT) {
        results.push(e.addClass("select_right"));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  HandSpace.createElement = function(index) {
    var balloonStr, cardClass, cat, catBalloon, catStr, categorySpan, cost, desc, e, header, img, name, point, pointSpan, price;
    if (this.cards[index] == null) {
      return false;
    }
    cardClass = Card.getClass(this.cards[index]);
    name = cardClass.getName();
    cat = cardClass.getCategory();
    cost = cardClass.getCost();
    price = cardClass.getPrice();
    point = cardClass.getPoint();
    desc = cardClass.getDescription();
    e = $('<div>').attr('data-index', index).addClass('hand');
    header = $('<span>').addClass('hand_header').html('[' + cost + ']' + cardClass.getName());
    img = cardClass.getImageObj().addClass('hand_image');
    catStr = cat != null ? '[' + cat + ']' : '';
    categorySpan = $('<span>').addClass('hand_footer hand_category').html(catStr);
    pointSpan = $('<span>').addClass('hand_footer hand_point').html('[$' + point + ']');
    catBalloon = cat != null ? cat : 'なし';
    balloonStr = (desc + "\n--------------------\nカテゴリ：" + catBalloon + "\nコスト：" + cost + "\n売却価格：" + price + "\n得点：" + point).replace(/\n/g, '<br>');
    e.attr('data-tooltip', balloonStr).darkTooltip({
      addClass: this.BALLOON_CLASS_NAME
    });
    e.on('click', function() {
      index = $(this).attr('data-index');
      return Game.handClickLeft(Number(index));
    });
    e.on('contextmenu', function() {
      index = $(this).attr('data-index');
      return Game.handClickRight(Number(index));
    });
    e.dblclick(function() {
      index = $(this).attr('data-index');
      return Game.handDoubleClick(Number(index));
    });
    e.append(header);
    e.append(img);
    e.append(categorySpan);
    e.append(pointSpan);
    return e;
  };

  HandSpace.isHandOver = function() {
    return this.getAmount() > this.getMax();
  };

  HandSpace.getMax = function() {
    var handMax, soukoNum;
    handMax = 5;
    soukoNum = PrivateSpace.getAmountExistSouko();
    return handMax + soukoNum * 4;
  };

  HandSpace.getAmountConsumer = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (Card.getClass(cardNum).isConsumer()) {
        amount++;
      }
    }
    return amount;
  };

  return HandSpace;

})(SpaceBase);

LogSpace = (function(superClass) {
  extend(LogSpace, superClass);

  function LogSpace() {
    return LogSpace.__super__.constructor.apply(this, arguments);
  }

  LogSpace.DIV_ID = "log_space";

  LogSpace.DIV_CLASS = 'log';

  LogSpace.DIV_INFO_CLASS = 'log_info';

  LogSpace.DIV_WARN_CLASS = 'log_warn';

  LogSpace.DIV_FATAL_CLASS = 'log_fatal';

  LogSpace.DIV_SCRIPT_ERROR_CLASS = 'log_script_error';

  LogSpace.init = function() {
    LogSpace.__super__.constructor.init.call(this);
    return this.removeAll();
  };

  LogSpace.removeAll = function() {
    return $('.' + this.DIV_CLASS).remove();
  };

  LogSpace.addFatal = function(message) {
    var e;
    e = $('<div>').addClass(this.DIV_CLASS + ' ' + this.DIV_FATAL_CLASS).html(message);
    return this.getElement().append(e);
  };

  LogSpace.addWarn = function(message) {
    var e;
    e = $('<div>').addClass(this.DIV_CLASS + ' ' + this.DIV_WARN_CLASS).html(message);
    return this.getElement().append(e);
  };

  LogSpace.addInfo = function(message) {
    var e;
    e = $('<div>').addClass(this.DIV_CLASS + ' ' + this.DIV_INFO_CLASS).html(message);
    return this.getElement().append(e);
  };

  LogSpace.addFatalInstant = function(message, sec) {
    var e;
    if (sec == null) {
      sec = 5;
    }
    e = $('<div>').addClass(this.DIV_FATAL_CLASS).html(message);
    this.getElement().append(e);
    e.fadeOut(sec * 1000);
    return setTimeout(e.remove, sec * 1000);
  };

  LogSpace.addWarnInstant = function(message, sec) {
    var e;
    if (sec == null) {
      sec = 5;
    }
    e = $('<div>').addClass(this.DIV_WARN_CLASS).html(message);
    this.getElement().append(e);
    e.fadeOut(sec * 1000);
    return setTimeout(e.remove, sec * 1000);
  };

  LogSpace.addInfoInstant = function(message, sec) {
    var e;
    if (sec == null) {
      sec = 5;
    }
    e = $('<div>').addClass(this.DIV_INFO_CLASS).html(message);
    this.getElement().append(e);
    e.fadeOut(sec * 1000);
    return setTimeout(e.remove, sec * 1000);
  };

  LogSpace.addScriptError = function(message, url, lineNo) {
    var e, txt;
    txt = ("スクリプトエラーが発生しました。\n申し訳ありませんが、<a href=\"https://twitter.com/rev84\" target=\"_blank\">@rev84</a>まで、以下のメッセージや、スクリーンショットを送っていただけると助かります。\n<hr>\n[message]\n" + message + "\n[url]\n" + url + "\n[lineNo]\n" + lineNo).replace(/\n/g, '<br>');
    e = $('<div>').addClass(this.DIV_SCRIPT_ERROR_CLASS).html(txt);
    return this.getElement().append(e);
  };

  return LogSpace;

})(SpaceBase);

Point = (function(superClass) {
  extend(Point, superClass);

  function Point() {
    return Point.__super__.constructor.apply(this, arguments);
  }

  Point.DIV_ID = 'point';

  Point.init = function() {
    return this.redraw(0);
  };

  Point.redraw = function() {
    return this.getElement().html(Game.getPoint());
  };

  return Point;

})(SpaceBase);

PrivateSpace = (function(superClass) {
  extend(PrivateSpace, superClass);

  function PrivateSpace() {
    return PrivateSpace.__super__.constructor.apply(this, arguments);
  }

  PrivateSpace.DIV_ID = "private";

  PrivateSpace.BALLOON_CLASS_NAME = 'balloon_private';

  PrivateSpace.STATUS_USABLE = 0;

  PrivateSpace.STATUS_WORKED = 1;

  PrivateSpace.cards = [];

  PrivateSpace.status = [];

  PrivateSpace.init = function() {
    PrivateSpace.__super__.constructor.init.call(this);
    this.cards = [];
    return this.status = [];
  };

  PrivateSpace.resetStatus = function() {
    var index, j, ref, results;
    this.status = [];
    results = [];
    for (index = j = 0, ref = this.cards.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
      results.push(this.status[index] = this.STATUS_USABLE);
    }
    return results;
  };

  PrivateSpace.getCardNum = function(index) {
    return this.cards[index];
  };

  PrivateSpace.getCardClass = function(index) {
    return Card.getClass(this.getCardNum(index));
  };

  PrivateSpace.isUsable = function(index) {
    if (this.status[index] == null) {
      return false;
    }
    if (this.status[index] !== this.STATUS_USABLE) {
      return false;
    }
    if (!this.getCardClass(index).isWorkable()) {
      return false;
    }
    return true;
  };

  PrivateSpace.setWorked = function(index) {
    if (this.isUsable(index) === false) {
      return false;
    }
    return this.status[index] = this.STATUS_WORKED;
  };

  PrivateSpace.getPoint = function() {
    var c, cardClass, j, len, point, ref;
    point = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      c = ref[j];
      cardClass = Card.getClass(c);
      point += cardClass.getPoint();
    }
    return point;
  };

  PrivateSpace.push = function(cardNum) {
    this.cards.push(Number(cardNum));
    return this.status.push(this.STATUS_USABLE);
  };

  PrivateSpace.pull = function(cardIndex) {
    var deletedCardNum, index, j, newCards, newStatus, ref;
    newCards = [];
    newStatus = [];
    deletedCardNum = null;
    for (index = j = 0, ref = this.cards.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
      if (index === cardIndex) {
        deletedCardNum = this.cards[index];
      } else {
        newCards.push(this.cards[index]);
        newStatus.push(this.status[index]);
      }
    }
    this.cards = newCards;
    this.status = newStatus;
    return deletedCardNum;
  };

  PrivateSpace.redraw = function() {
    var e, index, j, me, ref, results;
    me = this.getElement();
    me.html('');
    $('.' + this.BALLOON_CLASS_NAME).remove();
    results = [];
    for (index = j = 0, ref = this.cards.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
      e = this.createElement(index);
      if (e !== false) {
        results.push(me.append(e));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  PrivateSpace.createElement = function(index) {
    var balloonStr, cardClass, cat, catBalloon, catStr, categorySpan, cost, costStr, desc, e, header, img, name, point, pointSpan, pointStr, price;
    if (this.cards[index] == null) {
      return false;
    }
    cardClass = this.getCardClass(index);
    name = cardClass.getName();
    cat = cardClass.getCategory();
    cost = cardClass.getCost();
    price = cardClass.getPrice();
    point = cardClass.getPoint();
    desc = cardClass.getDescription();
    e = $('<div>').attr('data-index', index).addClass('private');
    costStr = cardClass.isPublicOnly() ? '' : '[' + cost + ']';
    header = $('<span>').addClass('private_header').html(costStr + cardClass.getName());
    img = cardClass.getImageObj().addClass('private_image');
    catStr = cat != null ? '[' + cat + ']' : '';
    categorySpan = $('<span>').addClass('private_footer private_category').html(catStr);
    pointStr = cardClass.isPublicOnly() ? '' : '[$' + point + ']';
    pointSpan = $('<span>').addClass('private_footer private_point').html(pointStr);
    catBalloon = cat != null ? cat : 'なし';
    balloonStr = (desc + "\n--------------------\nカテゴリ：" + catBalloon + "\nコスト：" + cost + "\n売却価格：" + price + "\n得点：" + point).replace(/\n/g, '<br>');
    e.attr('data-tooltip', balloonStr).darkTooltip({
      addClass: this.BALLOON_CLASS_NAME
    });
    if (this.status[index] === this.STATUS_WORKED) {
      e.addClass('used');
      e.append($('<img>').attr('src', this.IMG_WORKER).addClass('worker'));
    }
    e.dblclick(function() {
      if (Game.isClickable) {
        index = Number($(this).attr('data-index'));
        return Game.work('private', index);
      } else if (Game.isSell) {
        index = Number($(this).attr('data-index'));
        return Game.sellPrivate(index);
      }
    });
    e.append(header);
    e.append(img);
    e.append(categorySpan);
    e.append(pointSpan);
    return e;
  };

  PrivateSpace.isExistSellable = function() {
    var cardClass, index, j, ref;
    for (index = j = 0, ref = this.cards.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
      cardClass = this.getCardClass(index);
      if (cardClass.isSellable()) {
        return true;
      }
    }
    return false;
  };

  PrivateSpace.getAmount = function() {
    return this.cards.length;
  };

  PrivateSpace.getAmountHouritu = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (cardNum === Card.CARD_NUM_HOURITU) {
        amount++;
      }
    }
    return amount;
  };

  PrivateSpace.getAmountHudousan = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (cardNum === Card.CARD_NUM_HUDOUSAN) {
        amount++;
      }
    }
    return amount;
  };

  PrivateSpace.getAmountNoukyou = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (cardNum === Card.CARD_NUM_NOUKYOU) {
        amount++;
      }
    }
    return amount;
  };

  PrivateSpace.getAmountRouso = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (cardNum === Card.CARD_NUM_ROUSO) {
        amount++;
      }
    }
    return amount;
  };

  PrivateSpace.getAmountRail = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (cardNum === Card.CARD_NUM_RAIL) {
        amount++;
      }
    }
    return amount;
  };

  PrivateSpace.getAmountBuilding = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (cardNum === Card.CARD_NUM_BUILDING) {
        amount++;
      }
    }
    return amount;
  };

  PrivateSpace.getAmountExistSouko = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (cardNum === Card.CARD_NUM_SOUKO) {
        amount++;
      }
    }
    return amount;
  };

  PrivateSpace.getAmountExistSyataku = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (cardNum === Card.CARD_NUM_SYATAKU) {
        amount++;
      }
    }
    return amount;
  };

  PrivateSpace.getAmountInstitution = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (Card.getClass(cardNum).isInstitution()) {
        amount++;
      }
    }
    return amount;
  };

  PrivateSpace.getAmountFarming = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (Card.getClass(cardNum).isFarming()) {
        amount++;
      }
    }
    return amount;
  };

  PrivateSpace.getAmountIndustry = function() {
    var amount, cardNum, j, len, ref;
    amount = 0;
    ref = this.cards;
    for (j = 0, len = ref.length; j < len; j++) {
      cardNum = ref[j];
      if (Card.getClass(cardNum).isIndustry()) {
        amount++;
      }
    }
    return amount;
  };

  return PrivateSpace;

})(SpaceBase);

PublicSpace = (function(superClass) {
  extend(PublicSpace, superClass);

  function PublicSpace() {
    return PublicSpace.__super__.constructor.apply(this, arguments);
  }

  PublicSpace.DIV_ID = "public";

  PublicSpace.BALLOON_CLASS_NAME = 'balloon_public';

  PublicSpace.cards = [];

  PublicSpace.status = [];

  PublicSpace.init = function() {
    PublicSpace.__super__.constructor.init.call(this);
    this.cards = [];
    return this.status = [];
  };

  PublicSpace.resetStatus = function() {
    var index, j, ref, results;
    results = [];
    for (index = j = 0, ref = this.cards.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
      results.push(this.status[index] = this.STATUS_USABLE);
    }
    return results;
  };

  PublicSpace.getCardClass = function(index) {
    return Card.getClass(this.cards[index]);
  };

  PublicSpace.isUsable = function(index) {
    if (this.cards[index] === Card.CARD_NUM_KOUZAN) {
      return true;
    }
    if (this.status[index] == null) {
      return false;
    }
    if (this.status[index] !== this.STATUS_USABLE) {
      return false;
    }
    return true;
  };

  PublicSpace.setWorked = function(index) {
    if (this.isUsable(index === false)) {
      return false;
    }
    return this.status[index] = this.STATUS_WORKED;
  };

  PublicSpace.setDisabled = function(index) {
    if (this.isUsable(index === false)) {
      return false;
    }
    return this.status[index] = this.STATUS_DISABLED;
  };

  PublicSpace.push = function(cardNum) {
    this.cards.push(Number(cardNum));
    return this.status.push(this.STATUS_USABLE);
  };

  PublicSpace.pull = function(cardIndex) {
    var deletedCardNum, index, j, newCards, newStatus, ref;
    newCards = [];
    newStatus = [];
    deletedCardNum = null;
    for (index = j = 0, ref = this.cards.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
      if (index === cardIndex) {
        deletedCardNum = this.cards[index];
      } else {
        newCards.push(this.cards[index]);
        newStatus.push(this.status[index]);
      }
    }
    this.cards = newCards;
    this.status = newStatus;
    return deletedCardNum;
  };

  PublicSpace.disableLastest = function() {
    var index, j, ref, results;
    results = [];
    for (index = j = ref = this.status.length - 1; ref <= 0 ? j <= 0 : j >= 0; index = ref <= 0 ? ++j : --j) {
      if (this.status[index] === this.STATUS_USABLE) {
        this.status[index] = this.STATUS_DISABLED;
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  PublicSpace.redraw = function() {
    var e, index, j, me, ref, results;
    me = this.getElement();
    me.html('');
    $('.' + this.BALLOON_CLASS_NAME).remove();
    results = [];
    for (index = j = 0, ref = this.cards.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
      e = this.createElement(index);
      if (e !== false) {
        results.push(me.append(e));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  PublicSpace.createElement = function(index) {
    var balloonStr, cardClass, cat, catBalloon, catStr, categorySpan, cost, costBalloon, costStr, desc, e, header, img, name, point, pointBalloon, pointSpan, pointStr, price, priceBalloon;
    if (this.cards[index] == null) {
      return false;
    }
    cardClass = this.getCardClass(index);
    name = cardClass.getName();
    cat = cardClass.getCategory();
    cost = cardClass.getCost();
    price = cardClass.getPrice();
    point = cardClass.getPoint();
    desc = cardClass.getDescription();
    e = $('<div>').attr('data-index', index).addClass('public');
    costStr = cardClass.isPublicOnly() ? '' : '[' + cost + ']';
    header = $('<span>').addClass('public_header').html(costStr + cardClass.getName());
    img = cardClass.getImageObj().addClass('public_image');
    catStr = cat != null ? '[' + cat + ']' : '';
    categorySpan = $('<span>').addClass('public_footer public_category').html(catStr);
    pointStr = cardClass.isPublicOnly() ? '' : '[$' + point + ']';
    pointSpan = $('<span>').addClass('public_footer public_point').html(pointStr);
    costBalloon = cardClass.isPublicOnly() ? '-' : cost;
    priceBalloon = cardClass.isPublicOnly() ? '-' : price;
    pointBalloon = cardClass.isPublicOnly() ? '-' : point;
    catBalloon = cat != null ? cat : 'なし';
    balloonStr = (desc + "\n--------------------\nカテゴリ：" + catBalloon + "\nコスト：" + costBalloon + "\n売却価格：" + priceBalloon + "\n得点：" + pointBalloon).replace(/\n/g, '<br>');
    e.attr('data-tooltip', balloonStr).darkTooltip({
      gravity: 'north',
      addClass: this.BALLOON_CLASS_NAME
    });
    switch (this.status[index]) {
      case this.STATUS_WORKED:
        if (this.cards[index] !== Card.CARD_NUM_KOUZAN) {
          e.addClass('used');
        }
        e.append($('<img>').attr('src', this.IMG_WORKER).addClass('worker'));
        break;
      case this.STATUS_DISABLED:
        e.addClass('used');
        e.append($('<img>').attr('src', this.IMG_DISABLER).addClass('worker'));
    }
    e.dblclick(function() {
      index = Number($(this).attr('data-index'));
      return Game.work('public', index);
    });
    e.append(header);
    e.append(img);
    e.append(categorySpan);
    e.append(pointSpan);
    return e;
  };

  return PublicSpace;

})(SpaceBase);

RoundDeck = (function(superClass) {
  extend(RoundDeck, superClass);

  function RoundDeck() {
    return RoundDeck.__super__.constructor.apply(this, arguments);
  }

  RoundDeck.DIV_ID = 'round';

  RoundDeck.ROUND_MAP = {
    1: 2,
    2: 2,
    3: 3,
    4: 3,
    5: 3,
    6: 4,
    7: 4,
    8: 5,
    9: 5,
    10: 0
  };

  RoundDeck.deck = [];

  RoundDeck.round = 0;

  RoundDeck.init = function() {
    this.deck = [2, 4, 3, 13, 5, 6, 7, 8, 9, 10, 11, 12];
    return this.round = 1;
  };

  RoundDeck.pull = function() {
    if (this.deck.length === 0) {
      false;
    }
    return this.deck.shift();
  };

  RoundDeck.getRound = function() {
    return this.round;
  };

  RoundDeck.getSalary = function() {
    return this.ROUND_MAP[this.getRound()];
  };

  RoundDeck.addRound = function() {
    return this.round++;
  };

  RoundDeck.isGameEnd = function() {
    return this.round > 9;
  };

  RoundDeck.redraw = function() {
    return this.getElement().html('' + this.getRound() + ' / $' + this.getSalary());
  };

  return RoundDeck;

})(SpaceBase);

Stock = (function(superClass) {
  extend(Stock, superClass);

  function Stock() {
    return Stock.__super__.constructor.apply(this, arguments);
  }

  Stock.DIV_ID = 'stock';

  Stock.money = 5;

  Stock.init = function() {
    Stock.__super__.constructor.init.call(this);
    this.money = 5;
    return this.redraw();
  };

  Stock.push = function(amount) {
    if (amount < 0) {
      return false;
    }
    return this.money += amount;
  };

  Stock.pull = function(amount) {
    if (amount < 0) {
      return false;
    }
    this.money -= amount;
    return this.money = this.money < 0 ? 0 : this.money;
  };

  Stock.getAmount = function() {
    return this.money;
  };

  Stock.redraw = function() {
    return this.getElement().html('$ ' + this.getAmount());
  };

  return Stock;

})(SpaceBase);

Unpaid = (function(superClass) {
  extend(Unpaid, superClass);

  function Unpaid() {
    return Unpaid.__super__.constructor.apply(this, arguments);
  }

  Unpaid.DIV_ID = 'unpaid';

  Unpaid.money = 0;

  Unpaid.init = function() {
    Unpaid.__super__.constructor.init.call(this);
    this.money = 0;
    return this.redraw();
  };

  Unpaid.push = function(amount) {
    if (amount < 0) {
      return false;
    }
    return this.money += amount;
  };

  Unpaid.getAmount = function() {
    return this.money;
  };

  Unpaid.redraw = function() {
    return this.getElement().html('$ ' + this.getAmount());
  };

  return Unpaid;

})(SpaceBase);

Array.prototype.in_array = function(target) {
  var index, j, ref;
  for (index = j = 0, ref = this.length; 0 <= ref ? j < ref : j > ref; index = 0 <= ref ? ++j : --j) {
    if (this[index] === target) {
      return true;
    }
  }
  return false;
};

Worker = (function(superClass) {
  extend(Worker, superClass);

  function Worker() {
    return Worker.__super__.constructor.apply(this, arguments);
  }

  Worker.DIV_ID = 'worker';

  Worker.active = 0;

  Worker.max = 0;

  Worker.init = function() {
    Worker.__super__.constructor.init.call(this);
    this.active = 2;
    this.max = 2;
    return this.redraw();
  };

  Worker.getTotal = function() {
    return this.max;
  };

  Worker.getActive = function() {
    return this.active;
  };

  Worker.setMax = function(amount) {
    this.max = amount;
    return this.redraw();
  };

  Worker.add = function(isActiveNow) {
    if (isActiveNow == null) {
      isActiveNow = false;
    }
    this.max++;
    if (isActiveNow) {
      this.active++;
    }
    return this.redraw();
  };

  Worker.wake = function() {
    this.active = this.max;
    return this.redraw();
  };

  Worker.work = function() {
    if (this.active <= 0) {
      return false;
    }
    this.active--;
    return this.redraw();
  };

  Worker.redraw = function() {
    return this.getElement().html('' + this.active + ' / ' + this.max);
  };

  Worker.getLimit = function() {
    return 5 + PrivateSpace.getAmountExistSyataku();
  };

  Worker.isLimit = function() {
    return this.getTotal() >= this.getLimit();
  };

  return Worker;

})(SpaceBase);

$(function() {
  $('body').bind('contextmenu', function() {
    return false;
  });
  return Game.gameStart();
});

window.onerror = function(message, url, lineNo) {
  LogSpace.addScriptError(message, url, lineNo);
  return true;
};
